Arrays:
=================================================================================

001) An array is a group of like-type variables that are referred to by a common
     name.
002) An array can have one or more than one dimensions.

---------------------------------------------------------------------------------

One Dimensional Arrays:
---------------------------------------------------------------------------------

001) A one dimensioal array is generally a list of like-typed variables.
002) Syntax for declaring an array is:

type variable[];
new type[size];

003) Example:

int month_days[];
month_days = new int[12];

004) Here, we see, the size of the array will be 12 elements. It must be kept in
     mind that the numbering of array elements starts with 0.
005) The array elements will be numbered 0 - 11 in the above example.
006) For example, if we want to display the value at the first position, we call
     as follows:

System.out.println(month_days[0]);

007) If we want to display the fourth position's value:

System.out.println(month_days[3]);

008) It is possible to combine the declaration and size allocation of the array
     as well.

int month_days[] = new int[12];

009) This is the declaration of choice in professionally written Java programs.

010) Arrays can also be initialized when they are declared.
011) An "array initializer" is a list of comma-seperated expressions surrounded
     by curly braces.
012) For example:

int month_days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

---------------------------------------------------------------------------------

Multidimensional Arrays:
---------------------------------------------------------------------------------

001) In Java, multidimensional arrays are arrays of arrays.
002) The syntax for declaring a two dimensional array is as follows:

type variable name[][] = new type[no. of rows][no. of columns];

003) For example:

int twoD[][] = new int[4][5];

004) The above example allocates a 4 by 5 array and assigns it to twoD.
005) Consider the following program as example:

public class twoDimensionalArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int twoD[][] = new int[4][5];
		int i, j, k = 0;

		for(i = 0; i < 4; i++){
			for(j = 0; j < 5; j++){

				twoD[i][j] = k;
				if(k <= 9){
					
					System.out.print(" " + twoD[i][j] + " ");
				
				}
				else{
					
					System.out.print(twoD[i][j] + " ");
					
				}
				k++;
			
			}
			System.out.println();
			
		}
		
	}

}

006) This program generates the following output:

 0  1  2  3  4
 5  6  7  8  9
10 11 12 13 14
15 16 17 18 19 

007) We can also allocate memory for different rows of the multi-dimensional array
     seperately.
008) In this case, we only need to specify the memory of the first (leftmost) dimen-
     sion first. The syntax for this could be as explained below:

int twoD[][] = new int[5][];
twoD[0] = new int[5];
twoD[1] = new int[3];
twoD[2] = new int[1];		
twoD[3] = new int[2];
twoD[4] = new int[4];

009) In the above example we can see that when we allocate dimensions manually, we
     have the liberty of choosing the size for each row.
010) Let us consider the following program as example:

public class randonRowSizeTwoDimensionalArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int twoDimensionalArray[][] = new int[5][];
		twoDimensionalArray[0] = new int[1];
		twoDimensionalArray[1] = new int[2];
		twoDimensionalArray[2] = new int[3];
		twoDimensionalArray[3] = new int[4];
		twoDimensionalArray[4] = new int[5];
		
		int i, j, k = 0;
		
		for(i = 0; i < 5; i++){
			for(j = 0; j < i + 1; j++){
				
				twoDimensionalArray[i][j] = k;
				if(k <= 9){
					
					System.out.print("0" + twoDimensionalArray[i][j] + " ");
					
				}
				else{
					
					System.out.print(twoDimensionalArray[i][j] + " ");
				
				}
				k++;
				
			}
			
			System.out.println();
		
		}
		
	}

}

011) The above program gives us the following output:

00 
01 02 
03 04 05 
06 07 08 09 
10 11 12 13 14

012) Multidimensional arrays can be initialized in the following manner:

int arrayname[][] = {
		    {a1, a2, a3, a4},
		    {b1, b2, b3, b4},
		    {c1, c2, c3, c4},
		    {d1, d2, d3, d4}
		    };

013) Let us consider the follow program for example:

public class initializingTwoDimensionalArrays {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		double twoD[][] = {
				{0.0, 0.1, 0.2, 0.3},
				{1.0, 1.1, 1.2, 1.3},
				{2.0, 2.1, 2.2, 2.3},
				{3.0, 3.1, 3.2, 3.3},
		};
		
		int i, j;
		
		for(i = 0; i < 4; i++){
			for(j = 0; j < 4; j++){
				
				System.out.print(twoD[i][j] + "," + " ");
				
			}
			System.out.println();
		}
		
	}

}

014) The output of this program is:

0.0, 0.1, 0.2, 0.3, 
1.0, 1.1, 1.2, 1.3, 
2.0, 2.1, 2.2, 2.3, 
3.0, 3.1, 3.2, 3.3,

---------------------------------------------------------------------------------

Alternative Array Declaration Syntax:
---------------------------------------------------------------------------------

001) There is an alternate form of array declaration, with the following syntax:

type[] arrayname;
arrayname = new type[size];

OR

type[] arrayname = new type[size];

002) The same is applied to multidimensional array declaration:

type[][] arrayname;
arrayname = new type[row size][column size];

OR

type[][] arrayname = new type[row size][column size];






